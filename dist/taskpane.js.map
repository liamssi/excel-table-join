{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/webpack/bootstrap","webpack://office-addin-taskpane-js/webpack/runtime/global","webpack://office-addin-taskpane-js/webpack/runtime/hasOwnProperty shorthand","webpack://office-addin-taskpane-js/webpack/runtime/publicPath","webpack://office-addin-taskpane-js/webpack/runtime/jsonp chunk loading","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.html"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t926: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","Office.onReady(() => {\n  // Constants\n  const DEFAULT_RESULT_SHEET = \"état complet\";\n  const TABLE_NAME_MAX_LENGTH = 255;\n  const ROW_GAP = 3;\n  const DEBOUNCE_DELAY = 300;\n\n\n  function App() {\n    const self = this;\n\n    // Initialize all properties\n    self.allSheets = [];\n    self.sheets = [];\n    self.listNominativeSheet = \"\";\n    self.listNominativeTables = [];\n    self.listNominativeTable = \"\";\n    self.listNominativeColumns = [];\n    self.listNominativeJoinColumn = \"\";\n    self.selectedNominativeColumns = [];\n    self.listEffetiveSheet = \"\";\n    self.listEffetiveTables = [];\n    self.listEffetiveTable = \"\";\n    self.listEffetiveColumns = [];\n    self.listEffetiveJoinColumn = \"\";\n    self.selectedEffectiveColumns = [];\n    self.showNominativeAdvanced = false;\n    self.showEffectiveAdvanced = false;\n    self.resultSheetName = DEFAULT_RESULT_SHEET;\n    self.selectedNominativeGroupByColumns = [];\n    self.listNominativeGroupByColumns = [];\n    self.sheetCache = null;\n    self.listenersAdded = false;\n    self.filters = [];\n    self.columnUniqueValues = new Map();\n    self.showGroupBy = false;\n    self.templateSheet = \"\";\n    self.templateRangeAddress = \"\";\n    self.showColumnOrdering = false;\n    self.orderedColumns = [];\n    self.extensionTables = [];\n    self.showExtensionTables = false;\n\n    // Logging utility\n    self.log = (level, message, ...args) => {\n      const timestamp = new Date().toISOString();\n       console[level](`[${timestamp}] ${message}`, ...args);\n    };\n\n    // Debounce utility\n    self.debounce = (func, wait) => {\n      let timeout;\n      return (...args) => {\n        clearTimeout(timeout);\n        timeout = setTimeout(() => func.apply(self, args), wait);\n      };\n    };\n\n    // UI feedback utilities\n    self.showError = (message) => {\n      const root = document.getElementById(\"root\");\n      if (root) {\n        const errorDiv = document.createElement(\"div\");\n        errorDiv.className = \"notification is-danger\";\n        errorDiv.innerHTML = `<button class=\"delete\" onclick=\"this.parentElement.remove()\"></button>${message}`;\n        root.insertBefore(errorDiv, root.firstChild);\n      } else {\n        alert(message);\n      }\n    };\n\n    self.showProgress = (message) => {\n      const root = document.getElementById(\"root\");\n      if (root) {\n        const progressDiv = document.createElement(\"div\");\n        progressDiv.id = \"progress\";\n        progressDiv.className = \"notification is-info\";\n        progressDiv.textContent = message;\n        root.insertBefore(progressDiv, root.firstChild);\n      }\n    };\n\n    self.hideProgress = () => {\n      const progress = document.getElementById(\"progress\");\n      if (progress) progress.remove();\n    };\n\n    // Input sanitization\n    self.sanitizeSheetName = (name) => {\n      return name.replace(/[:\\\\\\/\\*\\?\\[\\]]/g, \"_\").slice(0, 31) || DEFAULT_RESULT_SHEET;\n    };\n\n    // Fetch unique values for a column (only from Nominative table for now)\n    self.getUniqueColumnValues = async (columnName) => {\n      if (self.columnUniqueValues.has(columnName)) {\n        return self.columnUniqueValues.get(columnName);\n      }\n      try {\n        const uniqueValues = await Excel.run(async (context) => {\n          const sheet = context.workbook.worksheets.getItem(self.listNominativeSheet);\n          const table = sheet.tables.getItem(self.listNominativeTable);\n          const column = table.columns.getItem(columnName);\n          const range = column.getDataBodyRange();\n          range.load(\"values\");\n          await context.sync();\n\n          const values = range.values.flat().map((val) => String(val || \"\").trim());\n          const uniqueSet = new Set(values);\n          return Array.from(uniqueSet).sort();\n        });\n        self.columnUniqueValues.set(columnName, uniqueValues);\n        self.log(\"info\", `Valeurs uniques récupérées pour la colonne \"${columnName}\":`, uniqueValues);\n        return uniqueValues;\n      } catch (error) {\n        self.log(\"error\", `Erreur lors de la récupération des valeurs uniques pour \"${columnName}\":`, error);\n        self.showError(`Impossible de charger les valeurs pour la colonne \"${columnName}\".`);\n        return [];\n      }\n    };\n\n    // Enhanced header generation function\n    self.generateTableHeader = (templateValues, tableInfo, groupRows, tableHeaders) => {\n      const computedValues = {\n        tableName: tableInfo.finalTableName,\n        rowCount: tableInfo.rowCount,\n        uniqueJoinValues: tableInfo.uniqueJoinValues || \"N/A\"\n      };\n\n      const sumColumns = new Set();\n      const avgColumns = new Set();\n      const expressionRegex = /\\{([^}]+)\\}/g;\n\n      templateValues.forEach((row) => {\n        row.forEach((cell) => {\n          let match;\n          while ((match = expressionRegex.exec(cell)) !== null) {\n            const expression = match[1];\n            if (expression.startsWith(\"sum:\")) {\n              sumColumns.add(expression.split(\":\")[1]);\n            } else if (expression.startsWith(\"avg:\")) {\n              avgColumns.add(expression.split(\":\")[1]);\n            }\n          }\n        });\n      });\n\n      const columnIndices = {};\n      tableHeaders.forEach((header, index) => (columnIndices[header] = index));\n\n      const tableData = groupRows.map((row) => tableHeaders.map((header) => row[header] || \"\"));\n      sumColumns.forEach((colName) => {\n        const colIndex = columnIndices[colName];\n        if (colIndex !== undefined) {\n          const values = tableData.map((row) => Number(row[colIndex]) || 0);\n          computedValues[`sum:${colName}`] = values.reduce((a, b) => a + b, 0);\n        } else {\n          computedValues[`sum:${colName}`] = `N/A (Colonne \"${colName}\" non trouvée dans la sortie)`;\n        }\n      });\n      avgColumns.forEach((colName) => {\n        const colIndex = columnIndices[colName];\n        if (colIndex !== undefined) {\n          const values = tableData.map((row) => Number(row[colIndex]) || 0);\n          computedValues[`avg:${colName}`] = values.length > 0 ? values.reduce((a, b) => a + b, 0) / values.length : 0;\n        } else {\n          computedValues[`avg:${colName}`] = `N/A (Colonne \"${colName}\" non trouvée dans la sortie)`;\n        }\n      });\n\n      const processedValues = templateValues.map((row) =>\n        row.map((cell) => {\n          if (typeof cell !== \"string\") return cell;\n          return cell.replace(expressionRegex, (match, expression) => {\n            const parts = expression.split(\":\");\n            if (parts.length === 2 && !isNaN(parts[1])) {\n              const columnName = parts[0];\n              const index = parseInt(parts[1], 10);\n              if (index < 0 || index >= groupRows.length) return `N/A (Index ${index} hors plage)`;\n              const rowData = groupRows[index];\n              return rowData[columnName] !== undefined\n                ? rowData[columnName]\n                : `N/A (Colonne \"${columnName}\" non trouvée)`;\n            }\n            return computedValues[expression] ?? match;\n          });\n        })\n      );\n\n      return processedValues;\n    };\n\n    // State validation\n    self.validateState = (nominativeHeaders, effectiveHeaders, allGroupByColumns) => {\n      const errors = [];\n      if (!self.listNominativeSheet || !self.listNominativeTable)\n        errors.push(\"Feuille ou tableau nominatif non sélectionné.\");\n      if (!self.listEffetiveSheet || !self.listEffetiveTable)\n        errors.push(\"Feuille ou tableau effectif non sélectionné.\");\n      if (nominativeHeaders.indexOf(self.listNominativeJoinColumn) === -1)\n        errors.push(`Colonne de jointure nominative \"${self.listNominativeJoinColumn}\" non trouvée.`);\n      if (effectiveHeaders.indexOf(self.listEffetiveJoinColumn) === -1)\n        errors.push(`Colonne de jointure effective \"${self.listEffetiveJoinColumn}\" non trouvée.`);\n      if (self.selectedNominativeColumns.length === 0) errors.push(\"Aucune colonne nominative sélectionnée.\");\n      if (self.selectedNominativeGroupByColumns.some((col) => !allGroupByColumns.includes(col)))\n        errors.push(\"Colonnes de regroupement invalides sélectionnées.\");\n      self.filters.forEach((filter, index) => {\n        if (filter.value.trim() && nominativeHeaders.indexOf(filter.column) === -1) {\n          errors.push(`Filtre ${index + 1} colonne \"${filter.column}\" non trouvée.`);\n        }\n      });\n      self.extensionTables.forEach((ext, index) => {\n        if (!ext.sheet || !ext.table)\n          errors.push(`Tableau d'extension ${index + 1} : Feuille ou tableau non sélectionné.`);\n        if (!ext.joinColumnResult || self.orderedColumns.indexOf(ext.joinColumnResult) === -1)\n          errors.push(\n            `Tableau d'extension ${index + 1} : Colonne de jointure résultat \"${ext.joinColumnResult}\" non trouvée.`\n          );\n        if (!ext.joinColumnExtension || ext.columns.every((col) => col.name !== ext.joinColumnExtension))\n          errors.push(\n            `Tableau d'extension ${index + 1} : Colonne de jointure extension \"${ext.joinColumnExtension}\" non trouvée.`\n          );\n      });\n      if (errors.length > 0) throw new Error(errors.join(\" \"));\n      if (self.selectedEffectiveColumns.length === 0)\n        self.log(\"warn\", \"Aucune colonne effective sélectionnée ; traitement avec les données nominatives uniquement\");\n    };\n\n    self.process = async () => {\n      const processButton = document.querySelector(\".button.is-primary\");\n      if (!processButton) return;\n    \n      processButton.disabled = true;\n      processButton.classList.add(\"is-loading\");\n      processButton.innerHTML = `\n        <span class=\"icon\">\n          <i class=\"fas fa-spinner fa-spin\"></i>\n        </span>\n        <span>Traitement en cours...</span>\n      `;\n    \n      try {\n        self.showProgress(\"Traitement des données...\");\n        const resultSheetInput = document.getElementById(\"resultSheetName\");\n        self.resultSheetName = self.sanitizeSheetName(\n          resultSheetInput ? resultSheetInput.value.trim() : DEFAULT_RESULT_SHEET\n        );\n    \n        await Excel.run(async (context) => {\n          const nominativeSheet = context.workbook.worksheets.getItem(self.listNominativeSheet);\n          const nominativeTable = nominativeSheet.tables.getItem(self.listNominativeTable);\n          const effectiveSheet = context.workbook.worksheets.getItem(self.listEffetiveSheet);\n          const effectiveTable = effectiveSheet.tables.getItem(self.listEffetiveTable);\n          const resultSheet = context.workbook.worksheets.getItemOrNullObject(self.resultSheetName);\n          const allTables = context.workbook.tables;\n    \n          const nominativeRange = nominativeTable.getRange();\n          const effectiveRange = effectiveTable.getRange();\n          nominativeRange.load(\"values\");\n          effectiveRange.load(\"values\");\n          allTables.load(\"items/name\");\n    \n          const nominativeColumns = nominativeTable.columns;\n          const effectiveColumns = effectiveTable.columns;\n          nominativeColumns.load(\"items/name, items/numberFormat\");\n          effectiveColumns.load(\"items/name, items/numberFormat\");\n    \n          const extensionData = {};\n          const extensionFormats = {};\n          for (const ext of self.extensionTables) {\n            const sheet = context.workbook.worksheets.getItem(ext.sheet);\n            const table = sheet.tables.getItem(ext.table);\n            const range = table.getRange();\n            range.load(\"values\");\n            const columns = table.columns;\n            columns.load(\"items/name, items/numberFormat\");\n            extensionData[ext.table] = { range, columns };\n          }\n    \n          let templateRange;\n          if (!self.templateSheet || !self.templateRangeAddress) {\n            try {\n              templateRange = context.workbook.names.getItem(\"HeaderTemplate\").getRange();\n            } catch (e) {\n              throw new Error(\n                \"Veuillez spécifier la feuille et la plage du modèle, ou définir une plage nommée 'HeaderTemplate'.\"\n              );\n            }\n          } else {\n            const templateSheet = context.workbook.worksheets.getItem(self.templateSheet);\n            templateRange = templateSheet.getRange(self.templateRangeAddress);\n          }\n          templateRange.load(\"values, rowCount, columnCount\");\n    \n          await context.sync();\n    \n          const templateValues = templateRange.values;\n          const templateRowCount = templateRange.rowCount;\n          const templateColumnCount = templateRange.columnCount;\n    \n          const nominativeData = nominativeRange.values;\n          const nominativeHeaders = nominativeData[0];\n          const nominativeRows = nominativeData.slice(1);\n          const effectiveData = effectiveRange.values;\n          const effectiveHeaders = effectiveData[0];\n          const effectiveRows = effectiveData.slice(1);\n    \n          for (const [tableName, { range, columns }] of Object.entries(extensionData)) {\n            const extData = range.values;\n            extensionData[tableName].headers = extData[0];\n            extensionData[tableName].rows = extData.slice(1);\n            extensionFormats[tableName] = {};\n            columns.items.forEach((col) => {\n              const format =\n                col.numberFormat && col.numberFormat[0] && col.numberFormat[0][0] ? col.numberFormat[0][0] : \"General\";\n              extensionFormats[tableName][col.name] = format;\n            });\n          }\n    \n          const allGroupByColumns = [\n            ...nominativeHeaders,\n            ...effectiveHeaders,\n            ...self.extensionTables.flatMap((ext) => ext.columns.map((col) => col.name))\n          ];\n          self.validateState(nominativeHeaders, effectiveHeaders, allGroupByColumns);\n    \n          const nominativeFormats = {};\n          nominativeColumns.items.forEach((col) => {\n            nominativeFormats[col.name] = col.numberFormat?.[0]?.[0] || \"General\";\n          });\n          const effectiveFormats = {};\n          effectiveColumns.items.forEach((col) => {\n            effectiveFormats[col.name] = col.numberFormat?.[0]?.[0] || \"General\";\n          });\n    \n          const effectiveLookup = new Map();\n          effectiveRows.forEach((row) => {\n            const joinValue = String(row[effectiveHeaders.indexOf(self.listEffetiveJoinColumn)] || \"\").trim();\n            effectiveLookup.set(joinValue, row);\n          });\n    \n          const extensionLookups = {};\n          self.extensionTables.forEach((ext) => {\n            const extRows = extensionData[ext.table].rows;\n            const extHeaders = extensionData[ext.table].headers;\n            const joinColIndex = extHeaders.indexOf(ext.joinColumnExtension);\n            const lookup = new Map();\n            extRows.forEach((row) => {\n              const joinValue = String(row[joinColIndex] || \"\").trim();\n              lookup.set(joinValue, row);\n            });\n            extensionLookups[ext.table] = { lookup, headers: extHeaders };\n          });\n    \n          let filteredNominativeRows = nominativeRows;\n          const activeFilters = self.filters.filter((f) => f.value.trim() !== \"\");\n          if (activeFilters.length > 0) {\n            const filterColIndices = activeFilters.map((f) => nominativeHeaders.indexOf(f.column));\n            filteredNominativeRows = nominativeRows.filter((row) =>\n              activeFilters.every(\n                (f, i) =>\n                  String(row[filterColIndices[i]] || \"\")\n                    .trim()\n                    .toLowerCase() === f.value.toLowerCase()\n              )\n            );\n          }\n    \n          const combinedData = filteredNominativeRows.map((row) => {\n            const nominativeJoinValue = String(\n              row[nominativeHeaders.indexOf(self.listNominativeJoinColumn)] || \"\"\n            ).trim();\n            const effectiveRow = effectiveLookup.get(nominativeJoinValue) || [];\n    \n            const valueMap = {};\n            nominativeHeaders.forEach((col, idx) => {\n              valueMap[col] = row[idx] ?? \"\";\n            });\n            effectiveHeaders.forEach((col, idx) => {\n              valueMap[col] = effectiveRow[idx] ?? \"\";\n            });\n            self.extensionTables.forEach((ext) => {\n              const extLookup = extensionLookups[ext.table].lookup;\n              const extHeaders = extensionLookups[ext.table].headers;\n              const resultJoinValue = valueMap[ext.joinColumnResult] ?? \"\";\n              const extRow = extLookup.get(String(resultJoinValue).trim()) || [];\n              extHeaders.forEach((col, idx) => {\n                valueMap[col] = extRow[idx] ?? \"\";\n              });\n            });\n    \n            return valueMap;\n          });\n    \n          const groupedData = {};\n          combinedData.forEach((row) => {\n            const groupKey = self.selectedNominativeGroupByColumns\n              .map((col) => String(row[col] || \"\").trim())\n              .join(\"|\");\n            if (!groupedData[groupKey]) groupedData[groupKey] = [];\n            groupedData[groupKey].push(row);\n          });\n    \n          // Fix: Use a separate variable for the result sheet\n          let targetSheet;\n          if (resultSheet.isNullObject) {\n            targetSheet = context.workbook.worksheets.add(self.resultSheetName);\n          } else {\n            targetSheet = resultSheet;\n            targetSheet.getUsedRange()?.clear();\n          }\n          targetSheet.activate();\n    \n          let currentRow = 1;\n          let tableCounter = 1;\n          const existingTableNames = new Set(allTables.items.map((t) => t.name.toLowerCase()));\n          const operations = [];\n    \n          for (const [groupKey, groupRows] of Object.entries(groupedData)) {\n            const tableHeaders = self.orderedColumns;\n            const tableData = groupRows.map((row) => tableHeaders.map((header) => row[header] || \"\"));\n    \n            const rowCount = tableData.length;\n            let finalTableName = `Tableau_${tableCounter}`;\n            while (existingTableNames.has(finalTableName.toLowerCase())) {\n              tableCounter++;\n              finalTableName = `Tableau_${tableCounter}`;\n            }\n    \n            operations.push({\n              currentRow,\n              finalTableName,\n              rowCount,\n              uniqueJoinValues: new Set(groupRows.map((r) => String(r[self.listNominativeJoinColumn] || \"\").trim()))\n                .size,\n              tableHeaders,\n              tableData,\n              groupRows,\n              execute: function() {\n                const processedHeaderValues = self.generateTableHeader(\n                  templateValues,\n                  this,\n                  this.groupRows,\n                  this.tableHeaders\n                );\n                const headerRange = targetSheet.getRangeByIndexes(\n                  this.currentRow - 1,\n                  0,\n                  templateRowCount,\n                  templateColumnCount\n                );\n                headerRange.copyFrom(templateRange, Excel.RangeCopyType.formats);\n                headerRange.values = processedHeaderValues;\n    \n                const tableStartRow = this.currentRow + templateRowCount;\n                const tableRange = targetSheet.getRangeByIndexes(\n                  tableStartRow - 1,\n                  0,\n                  this.tableData.length + 1,\n                  this.tableHeaders.length\n                );\n                tableRange.values = [this.tableHeaders, ...this.tableData];\n    \n                const headerTableRange = targetSheet.getRangeByIndexes(\n                  tableStartRow - 1,\n                  0,\n                  1,\n                  this.tableHeaders.length\n                );\n                const formats = this.tableHeaders.map(\n                  (header) =>\n                    nominativeFormats[header] ||\n                    effectiveFormats[header] ||\n                    self.extensionTables.reduce((fmt, ext) => fmt || extensionFormats[ext.table][header], null) ||\n                    \"General\"\n                );\n                headerTableRange.numberFormat = [formats];\n    \n                const newTable = targetSheet.tables.add(tableRange, true);\n                newTable.name = this.finalTableName;\n                existingTableNames.add(this.finalTableName.toLowerCase());\n                return tableStartRow + this.tableData.length + ROW_GAP;\n              }\n            });\n    \n            currentRow += operations[operations.length - 1].rowCount + ROW_GAP + templateRowCount;\n            tableCounter++;\n          }\n    \n          let nextRow = 1;\n          for (const op of operations) {\n            op.currentRow = nextRow;\n            nextRow = op.execute();\n          }\n    \n          targetSheet.getUsedRange().format.autofitColumns();\n          await context.sync();\n          self.log(\"info\", `Feuille '${self.resultSheetName}' créée avec ${tableCounter - 1} tableaux`);\n          self.hideProgress();\n        });\n      } catch (error) {\n        self.hideProgress();\n        self.log(\"error\", \"Erreur de traitement:\", error);\n        self.showError(`Une erreur est survenue : ${error.message}`);\n      } finally {\n        processButton.disabled = false;\n        processButton.classList.remove(\"is-loading\");\n        processButton.innerHTML = \"Traiter les Données\";\n      }\n    };\n\n    // Update ordered columns to include only selected columns for output\n    self.updateOrderedColumns = () => {\n      const combined = [\n        ...self.selectedNominativeColumns,\n        ...self.selectedEffectiveColumns,\n        ...self.extensionTables.flatMap((ext) => ext.selectedColumns)\n      ];\n      const currentSet = new Set(combined);\n      const filteredOrdered = self.orderedColumns.filter((col) => currentSet.has(col));\n      const newColumns = combined.filter((col) => !self.orderedColumns.includes(col));\n      self.orderedColumns = [...filteredOrdered, ...newColumns];\n\n      if (self.showColumnOrdering) {\n        self.renderColumnOrderList();\n      }\n    };\n\n    // Update group-by columns to include all columns from source tables\n    self.updateGroupByColumnsList = () => {\n      const allColumns = [\n        ...(self.listNominativeColumns || []).map((col) => col.name),\n        ...(self.listEffetiveColumns || []).map((col) => col.name),\n        ...self.extensionTables.flatMap((ext) => (ext.columns || []).map((col) => col.name))\n      ];\n      self.listNominativeGroupByColumns = Array.from(new Set(allColumns)).map((name) => ({ name }));\n      self.selectedNominativeGroupByColumns = self.selectedNominativeGroupByColumns.filter((col) =>\n        self.listNominativeGroupByColumns.some((c) => c.name === col)\n      );\n      if (\n        self.selectedNominativeGroupByColumns.length === 0 &&\n        self.listNominativeGroupByColumns.length > 0 &&\n        self.listNominativeJoinColumn\n      ) {\n        self.selectedNominativeGroupByColumns = [self.listNominativeJoinColumn];\n      }\n    };\n\n    self.renderColumnOrderList = () => {\n      const columnOrderList = document.getElementById(\"columnOrderList\");\n      if (columnOrderList) {\n        columnOrderList.innerHTML = self.orderedColumns\n          .map(\n            (col) => `\n            <div class=\"column-order-item\" draggable=\"true\" data-column=\"${col}\">\n              <span class=\"drag-handle\">☰</span> ${col}\n            </div>\n          `\n          )\n          .join(\"\");\n        self.setupDragAndDrop();\n      }\n    };\n\n    self.setupDragAndDrop = () => {\n      const columnOrderList = document.getElementById(\"columnOrderList\");\n      if (!columnOrderList) return;\n\n      let draggedItem = null;\n\n      const getDragAfterElement = (container, y) => {\n        const draggableElements = [...container.querySelectorAll(\".column-order-item:not(.dragging)\")];\n        return draggableElements.reduce(\n          (closest, child) => {\n            const box = child.getBoundingClientRect();\n            const offset = y - box.top - box.height / 2;\n            return offset < 0 && offset > closest.offset ? { offset: offset, element: child } : closest;\n          },\n          { offset: Number.NEGATIVE_INFINITY }\n        ).element;\n      };\n\n      columnOrderList.querySelectorAll(\".column-order-item\").forEach((item) => {\n        item.addEventListener(\"dragstart\", (e) => {\n          draggedItem = e.target;\n          setTimeout(() => item.classList.add(\"dragging\"), 0);\n        });\n\n        item.addEventListener(\"dragend\", () => {\n          item.classList.remove(\"dragging\");\n        });\n\n        item.addEventListener(\"dragover\", (e) => {\n          e.preventDefault();\n          const afterElement = getDragAfterElement(columnOrderList, e.clientY);\n          if (afterElement == null) {\n            columnOrderList.appendChild(draggedItem);\n          } else {\n            columnOrderList.insertBefore(draggedItem, afterElement);\n          }\n        });\n      });\n\n      columnOrderList.addEventListener(\"dragend\", () => {\n        const newOrder = Array.from(columnOrderList.children).map((item) => item.dataset.column);\n        self.orderedColumns = newOrder;\n        self.log(\"info\", \"Colonnes réordonnées:\", self.orderedColumns);\n      });\n    };\n\n    self.toggleColumnOrdering = () => {\n      self.showColumnOrdering = !self.showColumnOrdering;\n      self.render();\n    };\n\n    self.resetColumnOrder = () => {\n      self.orderedColumns = [\n        ...self.selectedNominativeColumns,\n        ...self.selectedEffectiveColumns,\n        ...self.extensionTables.flatMap((ext) => ext.selectedColumns)\n      ];\n      if (self.showColumnOrdering) {\n        self.renderColumnOrderList();\n      }\n    };\n\n    self.getWorkbookSheets = async () => {\n      if (self.sheetCache) return self.sheetCache;\n      try {\n        const sheets = await Excel.run(async (context) => {\n          const sheets = context.workbook.worksheets;\n          sheets.load(\"items/name\");\n          await context.sync();\n\n          for (let i = 0; i < sheets.items.length; i++) {\n            const sheet = sheets.items[i];\n            const tables = sheet.tables;\n            tables.load(\"items/name\");\n            await context.sync();\n\n            for (let j = 0; j < tables.items.length; j++) {\n              const table = tables.items[j];\n              table.columns.load(\"items/name\");\n              \n            }\n            await context.sync();\n          }\n          return sheets;\n        });\n        self.sheetCache = sheets;\n        return sheets;\n      } catch (error) {\n        self.log(\"error\", \"Erreur lors de la récupération des feuilles du classeur:\", error);\n        self.showError(\"Impossible de charger les feuilles du classeur.\");\n        return { items: [] };\n      }\n    };\n\n    self.invalidateCache = () => {\n      self.sheetCache = null;\n      self.columnUniqueValues.clear();\n    };\n\n    self.updateTemplateRange = async (sheetName) => {\n      try {\n        await Excel.run(async (context) => {\n          const sheet = context.workbook.worksheets.getItem(sheetName);\n          const usedRange = sheet.getUsedRange(true);\n          usedRange.load(\"address\");\n          await context.sync();\n\n          if (usedRange.address) {\n            self.templateRangeAddress = usedRange.address.split(\"!\")[1] || \"A1\";\n          } else {\n            self.templateRangeAddress = \"A1\";\n          }\n\n          const rangeInput = document.getElementById(\"templateRangeAddress\");\n          if (rangeInput) rangeInput.value = self.templateRangeAddress;\n        });\n      } catch (error) {\n        self.templateRangeAddress = \"A1\";\n        self.showError(`Impossible de détecter la plage utilisée pour \"${sheetName}\". Par défaut à A1.`);\n        const rangeInput = document.getElementById(\"templateRangeAddress\");\n        if (rangeInput) rangeInput.value = self.templateRangeAddress;\n      }\n    };\n\n    self.init = async () => {\n      try {\n        self.filters = [];\n        self.extensionTables = [];\n\n\n        console.log(\"befor get sheet name\");\n        \n        const workbookSheets = await self.getWorkbookSheets();\n\n        console.log(\"after get sheet name\");\n        self.allSheets = workbookSheets.items;\n        self.sheets = workbookSheets.items.filter((sheet) => sheet.tables.items.length > 0);\n\n        if (self.sheets.length === 0) {\n          self.showError(\n            \"Aucune feuille avec des tableaux trouvée dans le classeur pour les listes Nominative ou Effective.\"\n          );\n          return;\n        }\n        if (self.allSheets.length === 0) {\n          self.showError(\"Aucune feuille trouvée dans le classeur.\");\n          return;\n        }\n\n        self.listNominativeSheet = self.sheets[0].name;\n        self.listEffetiveSheet = self.sheets[0].name;\n        self.templateSheet = self.allSheets[0].name;\n        await self.updateTemplateRange(self.templateSheet);\n        self.handleNominativeSheetChange();\n        self.handleEffectiveSheetChange();\n      } catch (error) {\n        console.log();\n        \n        self.log(\"error\", \"Erreur d'initialisation:\", error);\n        self.showError(`Échec de l'initialisation : ${error.message}`);\n      }\n    };\n\n    self.handleNominativeSheetChange = () => {\n      const nominativeSheet = self.sheets.find((sheet) => sheet.name === self.listNominativeSheet);\n      if (nominativeSheet) {\n        self.listNominativeTables = nominativeSheet.tables.items;\n        if (self.listNominativeTables.length > 0) {\n          self.listNominativeTable = self.listNominativeTables[0].name;\n          self.handleNominativeTableChange();\n        } else {\n          self.listNominativeTables = [];\n          self.listNominativeTable = \"\";\n          self.listNominativeColumns = [];\n          self.selectedNominativeColumns = [];\n          self.filters = [];\n          self.columnUniqueValues.clear();\n          self.updateGroupByColumnsList();\n          self.orderedColumns = [];\n        }\n        self.updateDropdowns();\n      }\n    };\n\n    self.handleNominativeTableChange = () => {\n      const nominativeTable = self.listNominativeTables.find((table) => table.name === self.listNominativeTable);\n      if (nominativeTable) {\n        self.listNominativeColumns = nominativeTable.columns.items;\n        if (self.listNominativeColumns.length > 0) {\n          self.listNominativeJoinColumn = self.listNominativeColumns[0].name;\n          self.selectedNominativeColumns = self.listNominativeColumns.map((column) => column.name);\n          self.filters = [];\n          self.columnUniqueValues.clear();\n          self.updateGroupByColumnsList();\n          self.orderedColumns = [...self.selectedNominativeColumns];\n        } else {\n          self.listNominativeJoinColumn = \"\";\n          self.selectedNominativeColumns = [];\n          self.filters = [];\n          self.columnUniqueValues.clear();\n          self.updateGroupByColumnsList();\n          self.orderedColumns = [];\n        }\n        self.updateDropdowns();\n        self.renderGroupBySummary();\n      }\n    };\n\n    self.handleNominativeJoinColumnChange = () => {\n      if (self.listNominativeGroupByColumns.some((col) => col.name === self.listNominativeJoinColumn)) {\n        self.selectedNominativeGroupByColumns = [self.listNominativeJoinColumn];\n        self.updateGroupByColumns(\n          \"nominativeGroupByColumns\",\n          self.listNominativeGroupByColumns,\n          self.selectedNominativeGroupByColumns\n        );\n        self.renderGroupBySummary();\n      }\n    };\n\n    self.handleEffectiveSheetChange = () => {\n      const effectiveSheet = self.sheets.find((sheet) => sheet.name === self.listEffetiveSheet);\n      if (effectiveSheet) {\n        self.listEffetiveTables = effectiveSheet.tables.items;\n        if (self.listEffetiveTables.length > 0) {\n          self.listEffetiveTable = self.listEffetiveTables[0].name;\n          self.handleEffectiveTableChange();\n        } else {\n          self.listEffetiveTables = [];\n          self.listEffetiveTable = \"\";\n          self.listEffetiveColumns = [];\n          self.selectedEffectiveColumns = [];\n          self.updateOrderedColumns();\n          self.updateGroupByColumnsList();\n        }\n        self.updateDropdowns();\n      }\n    };\n\n    self.handleEffectiveTableChange = () => {\n      const effectiveTable = self.listEffetiveTables.find((table) => table.name === self.listEffetiveTable);\n      if (effectiveTable) {\n        self.listEffetiveColumns = effectiveTable.columns.items;\n        if (self.listEffetiveColumns.length > 0) {\n          self.listEffetiveJoinColumn = self.listEffetiveColumns[0].name;\n          self.selectedEffectiveColumns = self.listEffetiveColumns.map((column) => column.name);\n          self.updateOrderedColumns();\n          self.updateGroupByColumnsList();\n        } else {\n          self.listEffetiveJoinColumn = \"\";\n          self.selectedEffectiveColumns = [];\n          self.updateOrderedColumns();\n          self.updateGroupByColumnsList();\n        }\n        self.updateDropdowns();\n      }\n    };\n\n    self.handleEffectiveJoinColumnChange = () => {\n      self.updateDropdowns();\n    };\n\n    self.handleExtensionSheetChange = (index) => {\n      const ext = self.extensionTables[index];\n      const sheet = self.sheets.find((s) => s.name === ext.sheet);\n      if (sheet) {\n        ext.tables = sheet.tables.items;\n        ext.table = ext.tables.length > 0 ? ext.tables[0].name : \"\";\n        self.handleExtensionTableChange(index);\n      }\n      self.render();\n    };\n\n    self.handleExtensionTableChange = (index) => {\n      const ext = self.extensionTables[index];\n      const table = ext.tables.find((t) => t.name === ext.table);\n      if (table) {\n        ext.columns = table.columns.items;\n        ext.joinColumnExtension = ext.columns.length > 0 ? ext.columns[0].name : \"\";\n        ext.selectedColumns = ext.columns.map((col) => col.name);\n        ext.joinColumnResult = self.orderedColumns.length > 0 ? self.orderedColumns[0] : \"\";\n        ext.showColumns = false;\n      } else {\n        ext.columns = [];\n        ext.joinColumnExtension = \"\";\n        ext.selectedColumns = [];\n        ext.joinColumnResult = \"\";\n        ext.showColumns = false;\n      }\n      self.updateOrderedColumns();\n      self.updateGroupByColumnsList();\n      self.render();\n    };\n\n    self.addExtensionTable = () => {\n      if (self.sheets.length > 0) {\n        const newExt = {\n          sheet: self.sheets[0].name,\n          table: \"\",\n          joinColumnResult: self.orderedColumns.length > 0 ? self.orderedColumns[0] : \"\",\n          joinColumnExtension: \"\",\n          selectedColumns: [],\n          tables: [],\n          columns: [],\n          showColumns: false\n        };\n        self.extensionTables.push(newExt);\n        self.handleExtensionSheetChange(self.extensionTables.length - 1);\n      }\n    };\n\n    self.removeExtensionTable = (index) => {\n      self.extensionTables.splice(index, 1);\n      self.updateOrderedColumns();\n      self.updateGroupByColumnsList();\n      self.render();\n    };\n\n    self.toggleExtensionColumns = (index) => {\n      self.extensionTables[index].showColumns = !self.extensionTables[index].showColumns;\n      self.render();\n    };\n\n    self.updateDropdowns = () => {\n      self.updateDropdown(\"listNominativeSheet\", self.sheets, self.listNominativeSheet);\n      self.updateDropdown(\"listNominativeTable\", self.listNominativeTables, self.listNominativeTable);\n      self.updateDropdown(\"listNominativeJoinColumn\", self.listNominativeColumns, self.listNominativeJoinColumn);\n      self.updateDropdown(\"listEffetiveSheet\", self.sheets, self.listEffetiveSheet);\n      self.updateDropdown(\"listEffetiveTable\", self.listEffetiveTables, self.listEffetiveTable);\n      self.updateDropdown(\"listEffetiveJoinColumn\", self.listEffetiveColumns, self.listEffetiveJoinColumn);\n      self.updateDropdown(\"templateSheet\", self.allSheets, self.templateSheet);\n      self.updateColumnSelection(\"nominativeColumns\", self.listNominativeColumns, self.selectedNominativeColumns);\n      self.updateColumnSelection(\"effectiveColumns\", self.listEffetiveColumns, self.selectedEffectiveColumns);\n      self.updateGroupByColumns(\n        \"nominativeGroupByColumns\",\n        self.listNominativeGroupByColumns,\n        self.selectedNominativeGroupByColumns\n      );\n      self.renderGroupBySummary();\n    };\n\n    self.updateDropdown = (id, items, selectedValue) => {\n      const dropdown = document.getElementById(id);\n      if (dropdown) {\n        dropdown.innerHTML = items\n          .map(\n            (item) =>\n              `<option value=\"${item.name}\" ${item.name === selectedValue ? \"selected\" : \"\"}>${item.name}</option>`\n          )\n          .join(\"\");\n      }\n    };\n\n    self.updateColumnSelection = (id, columns, selectedColumns) => {\n      const container = document.getElementById(id);\n      if (container) {\n        container.innerHTML = columns\n          .map(\n            (column) => `\n            <div class=\"field\">\n              <div class=\"control\">\n                <label class=\"checkbox\">\n                  <input type=\"checkbox\" value=\"${column.name}\" ${\n              selectedColumns.includes(column.name) ? \"checked\" : \"\"\n            }>\n                  ${column.name}\n                </label>\n              </div>\n            </div>\n          `\n          )\n          .join(\"\");\n\n        container.querySelectorAll('input[type=\"checkbox\"]').forEach((checkbox) => {\n          checkbox.addEventListener(\n            \"change\",\n            self.debounce((e) => {\n              const columnName = e.target.value;\n              if (e.target.checked) {\n                if (!selectedColumns.includes(columnName)) selectedColumns.push(columnName);\n              } else {\n                const index = selectedColumns.indexOf(columnName);\n                if (index !== -1) selectedColumns.splice(index, 1);\n              }\n              self.updateOrderedColumns();\n              self.updateGroupByColumnsList();\n              if (self.showColumnOrdering) {\n                self.renderColumnOrderList();\n              }\n            }, DEBOUNCE_DELAY)\n          );\n        });\n\n        const selectAllBtn = document.getElementById(`${id}-select-all`);\n        const unselectAllBtn = document.getElementById(`${id}-unselect-all`);\n        if (selectAllBtn) {\n          selectAllBtn.addEventListener(\"click\", () => {\n            selectedColumns.length = 0;\n            selectedColumns.push(...columns.map((col) => col.name));\n            self.updateOrderedColumns();\n            self.updateGroupByColumnsList();\n            if (self.showColumnOrdering) {\n              self.renderColumnOrderList();\n            }\n            self.updateColumnSelection(id, columns, selectedColumns);\n          });\n        }\n        if (unselectAllBtn) {\n          unselectAllBtn.addEventListener(\"click\", () => {\n            selectedColumns.length = 0;\n            self.updateOrderedColumns();\n            self.updateGroupByColumnsList();\n            if (self.showColumnOrdering) {\n              self.renderColumnOrderList();\n            }\n            self.updateColumnSelection(id, columns, selectedColumns);\n          });\n        }\n      }\n    };\n\n    self.updateGroupByColumns = (id, columns, selectedColumns) => {\n      const container = document.getElementById(id);\n      if (container) {\n        container.innerHTML = columns\n          .map(\n            (column) => `\n            <div class=\"field\">\n              <div class=\"control\">\n                <label class=\"checkbox\">\n                  <input type=\"checkbox\" value=\"${column.name}\" ${\n              selectedColumns.includes(column.name) ? \"checked\" : \"\"\n            }>\n                  ${column.name}\n                </label>\n              </div>\n            </div>\n          `\n          )\n          .join(\"\");\n\n        container.querySelectorAll('input[type=\"checkbox\"]').forEach((checkbox) => {\n          checkbox.addEventListener(\n            \"change\",\n            self.debounce((e) => {\n              const columnName = e.target.value;\n              if (e.target.checked) {\n                if (!selectedColumns.includes(columnName)) selectedColumns.push(columnName);\n              } else {\n                const index = selectedColumns.indexOf(columnName);\n                if (index !== -1) selectedColumns.splice(index, 1);\n              }\n              self.renderGroupBySummary();\n            }, DEBOUNCE_DELAY)\n          );\n        });\n      }\n    };\n\n    self.renderGroupBySummary = () => {\n      const groupByHeader = document.querySelector(\".accordion-header .group-by-summary\");\n      if (groupByHeader) {\n        const summary =\n          self.selectedNominativeGroupByColumns.length > 0\n            ? ` (${self.selectedNominativeGroupByColumns.join(\", \")})`\n            : \" (Aucun)\";\n        groupByHeader.textContent = `Colonnes de Regroupement${summary}`;\n      }\n    };\n\n    self.toggleAdvanced = (section) => {\n      if (section === \"nominative\") {\n        self.showNominativeAdvanced = !self.showNominativeAdvanced;\n      } else if (section === \"effective\") {\n        self.showEffectiveAdvanced = !self.showEffectiveAdvanced;\n      }\n      self.render();\n    };\n\n    self.toggleGroupBy = () => {\n      self.showGroupBy = !self.showGroupBy;\n      self.render();\n    };\n\n    self.toggleExtensionTables = () => {\n      self.showExtensionTables = !self.showExtensionTables;\n      self.render();\n    };\n\n    self.render = async () => {\n      try {\n        const root = document.getElementById(\"root\");\n        if (!root) throw new Error(\"Élément racine non trouvé dans le DOM\");\n\n        for (const filter of self.filters) {\n          if (!self.columnUniqueValues.has(filter.column)) {\n            await self.getUniqueColumnValues(filter.column);\n          }\n        }\n\n        const groupBySummary =\n          self.selectedNominativeGroupByColumns.length > 0\n            ? ` (${self.selectedNominativeGroupByColumns.join(\", \")})`\n            : \" (Aucun)\";\n\n        root.innerHTML = `\n          <div class=\"m-3 box p-4\">\n            <h1 class=\"title is-4\">Outil de Liaison de Tableaux Excel</h1>\n            <div class=\"columns is-mobile\">\n              <div class=\"column\">\n                <h2 class=\"subtitle is-5 has-text-weight-bold\">Liste Nominative</h2>\n                <div class=\"field\">\n                  <label class=\"label\" for=\"listNominativeSheet\" data-tooltip=\"Sélectionnez la feuille contenant votre tableau de données principal\">Feuille :</label>\n                  <div class=\"control\">\n                    <div class=\"select is-fullwidth\">\n                      <select name=\"listNominativeSheet\" id=\"listNominativeSheet\">\n                        ${self.sheets\n                          .map(\n                            (sheet) =>\n                              `<option value=\"${sheet.name}\" ${\n                                sheet.name === self.listNominativeSheet ? \"selected\" : \"\"\n                              }>${sheet.name}</option>`\n                          )\n                          .join(\"\")}\n                      </select>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"field\">\n                  <label class=\"label\" for=\"listNominativeTable\" data-tooltip=\"Choisissez le tableau contenant vos données principales\">Tableau :</label>\n                  <div class=\"control\">\n                    <div class=\"select is-fullwidth\">\n                      <select name=\"listNominativeTable\" id=\"listNominativeTable\">\n                        ${self.listNominativeTables\n                          .map(\n                            (table) =>\n                              `<option value=\"${table.name}\" ${\n                                table.name === self.listNominativeTable ? \"selected\" : \"\"\n                              }>${table.name}</option>`\n                          )\n                          .join(\"\")}\n                      </select>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"field\">\n                  <label class=\"label\" for=\"listNominativeJoinColumn\" data-tooltip=\"Sélectionnez la colonne pour joindre avec la Liste Effective\">Colonne de Jointure :</label>\n                  <div class=\"control\">\n                    <div class=\"select is-fullwidth\">\n                      <select name=\"listNominativeJoinColumn\" id=\"listNominativeJoinColumn\">\n                        ${self.listNominativeColumns\n                          .map(\n                            (column) =>\n                              `<option value=\"${column.name}\" ${\n                                column.name === self.listNominativeJoinColumn ? \"selected\" : \"\"\n                              }>${column.name}</option>`\n                          )\n                          .join(\"\")}\n                      </select>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"field\">\n                  <div class=\"accordion\">\n                    <div class=\"accordion-header\" onclick=\"app.toggleAdvanced('nominative')\">\n                      <span class=\"button is-small is-fullwidth grid\" data-tooltip=\"Personnalisez les colonnes à inclure depuis la Liste Nominative\">\n                        <span class=\"icon\"><i class=\"fas ${\n                          self.showNominativeAdvanced ? \"fa-angle-down\" : \"fa-angle-right\"\n                        }\"></i></span> Modifier la Sélection des Colonnes\n                      </span>\n                    </div>\n                    <div class=\"accordion-content ${self.showNominativeAdvanced ? \"is-active\" : \"\"}\">\n                      <label class=\"label\">Colonnes à Inclure :</label>\n                      <div class=\"buttons mb-2\">\n                        <button class=\"button is-small is-info\" id=\"nominativeColumns-select-all\" data-tooltip=\"Sélectionner toutes les colonnes disponibles\">Tout Sélectionner</button>\n                        <button class=\"button is-small is-warning\" id=\"nominativeColumns-unselect-all\" data-tooltip=\"Désélectionner toutes les colonnes\">Tout Désélectionner</button>\n                      </div>\n                      <div id=\"nominativeColumns\" class=\"grid is-mobile is-gap-0\"></div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div class=\"column\">\n                <h2 class=\"subtitle is-5 has-text-weight-bold\">Liste Effective</h2>\n                <div class=\"field\">\n                  <label class=\"label\" for=\"listEffetiveSheet\" data-tooltip=\"Sélectionnez la feuille contenant votre tableau de données secondaire\">Feuille :</label>\n                  <div class=\"control\">\n                    <div class=\"select is-fullwidth\">\n                      <select name=\"listEffetiveSheet\" id=\"listEffetiveSheet\">\n                        ${self.sheets\n                          .map(\n                            (sheet) =>\n                              `<option value=\"${sheet.name}\" ${\n                                sheet.name === self.listEffetiveSheet ? \"selected\" : \"\"\n                              }>${sheet.name}</option>`\n                          )\n                          .join(\"\")}\n                      </select>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"field\">\n                  <label class=\"label\" for=\"listEffetiveTable\" data-tooltip=\"Choisissez le tableau contenant vos données secondaires\">Tableau :</label>\n                  <div class=\"control\">\n                    <div class=\"select is-fullwidth\">\n                      <select name=\"listEffetiveTable\" id=\"listEffetiveTable\">\n                        ${self.listEffetiveTables\n                          .map(\n                            (table) =>\n                              `<option value=\"${table.name}\" ${\n                                table.name === self.listEffetiveTable ? \"selected\" : \"\"\n                              }>${table.name}</option>`\n                          )\n                          .join(\"\")}\n                      </select>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"field\">\n                  <label class=\"label\" for=\"listEffetiveJoinColumn\" data-tooltip=\"Sélectionnez la colonne pour joindre avec la Liste Nominative\">Colonne de Jointure :</label>\n                  <div class=\"control\">\n                    <div class=\"select is-fullwidth\">\n                      <select name=\"listEffetiveJoinColumn\" id=\"listEffetiveJoinColumn\">\n                        ${self.listEffetiveColumns\n                          .map(\n                            (column) =>\n                              `<option value=\"${column.name}\" ${\n                                column.name === self.listEffetiveJoinColumn ? \"selected\" : \"\"\n                              }>${column.name}</option>`\n                          )\n                          .join(\"\")}\n                      </select>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"field\">\n                  <div class=\"accordion\">\n                    <div class=\"accordion-header\" onclick=\"app.toggleAdvanced('effective')\">\n                      <span class=\"button is-small is-fullwidth grid\" data-tooltip=\"Personnalisez les colonnes à inclure depuis la Liste Effective\">\n                        <span class=\"icon\"><i class=\"fas ${\n                          self.showEffectiveAdvanced ? \"fa-angle-down\" : \"fa-angle-right\"\n                        }\"></i></span> Modifier la Sélection des Colonnes\n                      </span>\n                    </div>\n                    <div class=\"accordion-content ${self.showEffectiveAdvanced ? \"is-active\" : \"\"}\">\n                      <label class=\"label\">Colonnes à Inclure :</label>\n                      <div class=\"buttons mb-2\">\n                        <button class=\"button is-small is-info\" id=\"effectiveColumns-select-all\" data-tooltip=\"Sélectionner toutes les colonnes disponibles\">Tout Sélectionner</button>\n                        <button class=\"button is-small is-warning\" id=\"effectiveColumns-unselect-all\" data-tooltip=\"Désélectionner toutes les colonnes\">Tout Désélectionner</button>\n                      </div>\n                      <div id=\"effectiveColumns\" class=\"grid is-mobile is-gap-0\"></div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"field\">\n              <div class=\"accordion\">\n                <div class=\"accordion-header\" onclick=\"app.toggleGroupBy()\">\n                  <span class=\"button is-fullwidth is-small grid\" data-tooltip=\"Choisissez les colonnes pour regrouper les tableaux de sortie\">\n                    <span class=\"icon\"><i class=\"fas ${\n                      self.showGroupBy ? \"fa-angle-down\" : \"fa-angle-right\"\n                    }\"></i></span>\n                    <span class=\"group-by-summary\">Colonnes de Regroupement${groupBySummary}</span>\n                  </span>\n                </div>\n                <div class=\"accordion-content ${self.showGroupBy ? \"is-active\" : \"\"}\">\n                  <label class=\"label\">Sélectionnez les Colonnes pour Regrouper :</label>\n                  <div id=\"nominativeGroupByColumns\" class=\"grid is-mobile is-gap-0 is-columns-gap-0\"></div>\n                </div>\n              </div>\n            </div>\n            <div class=\"field\">\n              <div class=\"accordion\">\n                <div class=\"accordion-header\" onclick=\"app.toggleExtensionTables()\">\n                  <span class=\"button is-fullwidth is-small grid\" data-tooltip=\"Ajoutez des tableaux supplémentaires pour enrichir vos données\">\n                    <span class=\"icon\"><i class=\"fas ${\n                      self.showExtensionTables ? \"fa-angle-down\" : \"fa-angle-right\"\n                    }\"></i></span>\n                    <span>Tableaux d'Extension (${self.extensionTables.length})</span>\n                  </span>\n                </div>\n                <div class=\"accordion-content ${self.showExtensionTables ? \"is-active\" : \"\"}\">\n                  <div id=\"extensionTablesContainer\">\n                    ${self.extensionTables\n                      .map(\n                        (ext, index) => `\n                    <div class=\"box mb-2\">\n                      <h3 class=\"subtitle is-6\">Tableau d'Extension ${index + 1}</h3>\n                      <div class=\"field\">\n                        <label class=\"label\" data-tooltip=\"Sélectionnez la feuille pour ce tableau d'extension\">Feuille :</label>\n                        <div class=\"control\">\n                          <div class=\"select is-fullwidth\">\n                            <select class=\"extension EFFECTSSheet\" data-index=\"${index}\">\n                              ${self.sheets\n                                .map(\n                                  (s) =>\n                                    `<option value=\"${s.name}\" ${s.name === ext.sheet ? \"selected\" : \"\"}>${\n                                      s.name\n                                    }</option>`\n                                )\n                                .join(\"\")}\n                            </select>\n                          </div>\n                        </div>\n                      </div>\n                      <div class=\"field\">\n                        <label class=\"label\" data-tooltip=\"Choisissez le tableau pour enrichir vos données\">Tableau :</label>\n                        <div class=\"control\">\n                          <div class=\"select is-fullwidth\">\n                            <select class=\"extensionTable\" data-index=\"${index}\">\n                              ${ext.tables\n                                .map(\n                                  (t) =>\n                                    `<option value=\"${t.name}\" ${t.name === ext.table ? \"selected\" : \"\"}>${\n                                      t.name\n                                    }</option>`\n                                )\n                                .join(\"\")}\n                            </select>\n                          </div>\n                        </div>\n                      </div>\n                      <div class=\"field\">\n                        <label class=\"label\" data-tooltip=\"Colonne du résultat pour joindre avec ce tableau\">Colonne de Jointure (Résultat) :</label>\n                        <div class=\"control\">\n                          <div class=\"select is-fullwidth\">\n                            <select class=\"extensionJoinResult\" data-index=\"${index}\">\n                              ${self.orderedColumns\n                                .map(\n                                  (col) =>\n                                    `<option value=\"${col}\" ${\n                                      col === ext.joinColumnResult ? \"selected\" : \"\"\n                                    }>${col}</option>`\n                                )\n                                .join(\"\")}\n                            </select>\n                          </div>\n                        </div>\n                      </div>\n                      <div class=\"field\">\n                        <label class=\"label\" data-tooltip=\"Colonne de ce tableau pour joindre avec le résultat\">Colonne de Jointure (Extension) :</label>\n                        <div class=\"control\">\n                          <div class=\"select is-fullwidth\">\n                            <select class=\"extensionJoinExt\" data-index=\"${index}\">\n                              ${ext.columns\n                                .map(\n                                  (col) =>\n                                    `<option value=\"${col.name}\" ${\n                                      col.name === ext.joinColumnExtension ? \"selected\" : \"\"\n                                    }>${col.name}</option>`\n                                )\n                                .join(\"\")}\n                            </select>\n                          </div>\n                        </div>\n                      </div>\n                      <div class=\"field\">\n                        <div class=\"accordion\">\n                          <div class=\"accordion-header\" onclick=\"app.toggleExtensionColumns(${index})\">\n                            <span class=\"button is-small is-fullwidth grid\" data-tooltip=\"Sélectionnez les colonnes à inclure depuis ce tableau\">\n                              <span class=\"icon\"><i class=\"fas ${\n                                ext.showColumns ? \"fa-angle-down\" : \"fa-angle-right\"\n                              }\"></i></span> Modifier la Sélection des Colonnes\n                            </span>\n                          </div>\n                          <div class=\"accordion-content ${ext.showColumns ? \"is-active\" : \"\"}\">\n                            <label class=\"label\">Colonnes à Inclure :</label>\n                            <div class=\"buttons mb-2\">\n                              <button class=\"button is-small is-info\" id=\"extensionColumns-${index}-select-all\" data-tooltip=\"Sélectionner toutes les colonnes\">Tout Sélectionner</button>\n                              <button class=\"button is-small is-warning\" id=\"extensionColumns-${index}-unselect-all\" data-tooltip=\"Désélectionner toutes les colonnes\">Tout Désélectionner</button>\n                            </div>\n                            <div id=\"extensionColumns-${index}\" class=\"grid is-mobile is-gap-0\"></div>\n                          </div>\n                        </div>\n                      </div>\n                      <button class=\"button is-danger is-small removeExtension\" data-index=\"${index}\" data-tooltip=\"Supprimer ce tableau d'extension\">Supprimer</button>\n                    </div>\n                  `\n                      )\n                      .join(\"\")}\n                  </div>\n                  <button class=\"button is-info is-small\" id=\"addExtensionTable\" data-tooltip=\"Ajouter un nouveau tableau d'extension\">Ajouter un Tableau d'Extension</button>\n                </div>\n              </div>\n            </div>\n            <div class=\"field\">\n              <div class=\"accordion\">\n                <div class=\"accordion-header\" onclick=\"app.toggleColumnOrdering()\">\n                  <span class=\"button is-fullwidth is-small grid\" data-tooltip=\"Réorganiser l'ordre des colonnes dans la sortie\">\n                    <span class=\"icon\"><i class=\"fas ${\n                      self.showColumnOrdering ? \"fa-angle-down\" : \"fa-angle-right\"\n                    }\"></i></span> Réorganiser les Colonnes\n                  </span>\n                </div>\n                <div class=\"accordion-content ${self.showColumnOrdering ? \"is-active\" : \"\"}\">\n                  <div id=\"columnOrderList\" class=\"box mb-2\">\n                    ${self.orderedColumns\n                      .map(\n                        (col) => `\n                      <div class=\"column-order-item\" draggable=\"true\" data-column=\"${col}\">\n                        <span class=\"drag-handle\">☰</span> ${col}\n                      </div>\n                    `\n                      )\n                      .join(\"\")}\n                  </div>\n                  <button class=\"button is-small is-info\" onclick=\"app.resetColumnOrder()\" data-tooltip=\"Réinitialiser à l'ordre par défaut des colonnes\">Réinitialiser à l'Ordre par Défaut</button>\n                </div>\n              </div>\n            </div>\n            <div class=\"field\">\n              <label class=\"label\" data-tooltip=\"Filtrer les données de la Liste Nominative en fonction des valeurs des colonnes\">Filtres :</label>\n              <div id=\"filtersContainer\">\n                ${self.filters\n                  .map((filter, index) => {\n                    const uniqueValues = self.columnUniqueValues.get(filter.column) || [];\n                    return `\n                    <div class=\"field is-grouped mb-2\">\n                      <div class=\"control\">\n                        <div class=\"select\">\n                          <select class=\"filterColumn\" data-index=\"${index}\" data-tooltip=\"Choisissez une colonne à filtrer\">\n                            ${self.listNominativeColumns\n                              .map(\n                                (column) =>\n                                  `<option value=\"${column.name}\" ${column.name === filter.column ? \"selected\" : \"\"}>${\n                                    column.name\n                                  }</option>`\n                              )\n                              .join(\"\")}\n                          </select>\n                        </div>\n                      </div>\n                      <div class=\"control\">\n                        <div class=\"select\">\n                          <select class=\"filterValue\" data-index=\"${index}\" data-tooltip=\"Sélectionnez une valeur pour filtrer la colonne\">\n                            <option value=\"\">Sélectionnez une valeur</option>\n                            ${uniqueValues\n                              .map(\n                                (value) =>\n                                  `<option value=\"${value}\" ${\n                                    value === filter.value ? \"selected\" : \"\"\n                                  }>${value}</option>`\n                              )\n                              .join(\"\")}\n                          </select>\n                        </div>\n                      </div>\n                      <div class=\"control\">\n                        <button class=\"button is-danger removeFilter\" data-index=\"${index}\" data-tooltip=\"Supprimer ce filtre\">Supprimer</button>\n                      </div>\n                    </div>\n                  `;\n                  })\n                  .join(\"\")}\n              </div>\n              <button class=\"button is-info mt-2 is-small\" id=\"addFilter\" data-tooltip=\"Ajouter un nouveau filtre pour affiner vos données\">\n                <span class=\"icon\"><i class=\"fas fa-filter\"></i></span> <span>Ajouter un Filtre</span>\n              </button>\n            </div>\n            <div class=\"field grid\">\n              <div>\n                <label class=\"label\" for=\"templateSheet\" data-tooltip=\"Sélectionnez la feuille contenant votre modèle d'en-tête\">Feuille du Modèle d'En-tête :</label>\n                <div class=\"control\">\n                  <div class=\"select is-fullwidth\">\n                    <select id=\"templateSheet\">\n                      ${self.allSheets\n                        .map(\n                          (sheet) =>\n                            `<option value=\"${sheet.name}\" ${sheet.name === self.templateSheet ? \"selected\" : \"\"}>${\n                              sheet.name\n                            }</option>`\n                        )\n                        .join(\"\")}\n                    </select>\n                  </div>\n                </div>\n              </div>\n              <div>\n                <label class=\"label\" for=\"templateRangeAddress\" data-tooltip=\"Spécifiez la plage (ex. A1:B2) pour le modèle d'en-tête\">Plage du Modèle (ex. A1:B2) :</label>\n                <div class=\"control\">\n                  <input class=\"input\" type=\"text\" id=\"templateRangeAddress\" placeholder=\"ex. A1:B2\" value=\"${\n                    self.templateRangeAddress\n                  }\">\n                </div>\n                <p class=\"help\">Détectée automatiquement à partir de la plage utilisée de la feuille sélectionnée. Remplacez par une plage personnalisée si nécessaire.</p>\n              </div>\n            </div>\n            <div class=\"field\">\n              <label class=\"label\" for=\"resultSheetName\" data-tooltip=\"Nommez la feuille où les données traitées seront sorties\">Nom de la Feuille de Résultat :</label>\n              <div class=\"control\">\n                <input class=\"input\" type=\"text\" id=\"resultSheetName\" placeholder=\"Entrez le nom de la feuille de résultat\" value=\"${\n                  self.resultSheetName\n                }\">\n              </div>\n            </div>\n            <div class=\"mt-4\">\n              <button class=\"button is-primary is-fullwidth\" onclick=\"app.process()\" data-tooltip=\"Démarrer le traitement des données selon vos sélections\">Traiter les Données</button>\n            </div>\n          </div>\n        `;\n\n        if (self.showColumnOrdering) {\n          self.setupDragAndDrop();\n        }\n\n        document.getElementById(\"listNominativeSheet\")?.addEventListener(\n          \"change\",\n          self.debounce((e) => {\n            self.listNominativeSheet = e.target.value;\n            self.handleNominativeSheetChange();\n          }, DEBOUNCE_DELAY)\n        );\n        document.getElementById(\"listNominativeTable\")?.addEventListener(\n          \"change\",\n          self.debounce((e) => {\n            self.listNominativeTable = e.target.value;\n            self.handleNominativeTableChange();\n          }, DEBOUNCE_DELAY)\n        );\n        document.getElementById(\"listNominativeJoinColumn\")?.addEventListener(\n          \"change\",\n          self.debounce((e) => {\n            self.listNominativeJoinColumn = e.target.value;\n            self.handleNominativeJoinColumnChange();\n          }, DEBOUNCE_DELAY)\n        );\n        document.getElementById(\"listEffetiveSheet\")?.addEventListener(\n          \"change\",\n          self.debounce((e) => {\n            self.listEffetiveSheet = e.target.value;\n            self.handleEffectiveSheetChange();\n          }, DEBOUNCE_DELAY)\n        );\n        document.getElementById(\"listEffetiveTable\")?.addEventListener(\n          \"change\",\n          self.debounce((e) => {\n            self.listEffetiveTable = e.target.value;\n            self.handleEffectiveTableChange();\n          }, DEBOUNCE_DELAY)\n        );\n        document.getElementById(\"listEffetiveJoinColumn\")?.addEventListener(\n          \"change\",\n          self.debounce((e) => {\n            self.listEffetiveJoinColumn = e.target.value;\n            self.handleEffectiveJoinColumnChange();\n          }, DEBOUNCE_DELAY)\n        );\n        document.getElementById(\"resultSheetName\")?.addEventListener(\"input\", (e) => {\n          self.resultSheetName = self.sanitizeSheetName(e.target.value.trim() || DEFAULT_RESULT_SHEET);\n        });\n        document.getElementById(\"templateSheet\")?.addEventListener(\n          \"change\",\n          self.debounce(async (e) => {\n            self.templateSheet = e.target.value;\n            await self.updateTemplateRange(self.templateSheet);\n          }, DEBOUNCE_DELAY)\n        );\n        document.getElementById(\"templateRangeAddress\")?.addEventListener(\n          \"input\",\n          self.debounce((e) => {\n            self.templateRangeAddress = e.target.value.trim();\n          }, DEBOUNCE_DELAY)\n        );\n\n        document.getElementById(\"addFilter\")?.addEventListener(\"click\", async () => {\n          if (self.listNominativeColumns.length > 0) {\n            const newColumn = self.listNominativeColumns[0].name;\n            self.filters.push({ column: newColumn, value: \"\" });\n            await self.getUniqueColumnValues(newColumn);\n            self.render();\n          }\n        });\n\n        document.querySelectorAll(\".filterColumn\").forEach((select) => {\n          select.addEventListener(\n            \"change\",\n            self.debounce(async (e) => {\n              const index = parseInt(e.target.dataset.index, 10);\n              self.filters[index].column = e.target.value;\n              self.filters[index].value = \"\";\n              if (!self.columnUniqueValues.has(self.filters[index].column)) {\n                await self.getUniqueColumnValues(self.filters[index].column);\n              }\n              self.render();\n            }, DEBOUNCE_DELAY)\n          );\n        });\n\n        document.querySelectorAll(\".filterValue\").forEach((select) => {\n          select.addEventListener(\n            \"change\",\n            self.debounce((e) => {\n              const index = parseInt(e.target.dataset.index, 10);\n              self.filters[index].value = e.target.value;\n            }, DEBOUNCE_DELAY)\n          );\n        });\n\n        document.querySelectorAll(\".removeFilter\").forEach((button) => {\n          button.addEventListener(\n            \"click\",\n            self.debounce((e) => {\n              const index = parseInt(e.target.dataset.index, 10);\n              self.filters.splice(index, 1);\n              self.render();\n            }, DEBOUNCE_DELAY)\n          );\n        });\n\n        document.getElementById(\"addExtensionTable\")?.addEventListener(\"click\", () => {\n          self.addExtensionTable();\n        });\n        document.querySelectorAll(\".extensionSheet\").forEach((select) => {\n          select.addEventListener(\n            \"change\",\n            self.debounce((e) => {\n              const index = parseInt(e.target.dataset.index);\n              self.extensionTables[index].sheet = e.target.value;\n              self.handleExtensionSheetChange(index);\n            }, DEBOUNCE_DELAY)\n          );\n        });\n        document.querySelectorAll(\".extensionTable\").forEach((select) => {\n          select.addEventListener(\n            \"change\",\n            self.debounce((e) => {\n              const index = parseInt(e.target.dataset.index);\n              self.extensionTables[index].table = e.target.value;\n              self.handleExtensionTableChange(index);\n            }, DEBOUNCE_DELAY)\n          );\n        });\n        document.querySelectorAll(\".extensionJoinResult\").forEach((select) => {\n          select.addEventListener(\n            \"change\",\n            self.debounce((e) => {\n              const index = parseInt(e.target.dataset.index);\n              self.extensionTables[index].joinColumnResult = e.target.value;\n              self.render();\n            }, DEBOUNCE_DELAY)\n          );\n        });\n        document.querySelectorAll(\".extensionJoinExt\").forEach((select) => {\n          select.addEventListener(\n            \"change\",\n            self.debounce((e) => {\n              const index = parseInt(e.target.dataset.index);\n              self.extensionTables[index].joinColumnExtension = e.target.value;\n              self.render();\n            }, DEBOUNCE_DELAY)\n          );\n        });\n        document.querySelectorAll(\".removeExtension\").forEach((button) => {\n          button.addEventListener(\n            \"click\",\n            self.debounce((e) => {\n              const index = parseInt(e.target.dataset.index);\n              self.removeExtensionTable(index);\n            }, DEBOUNCE_DELAY)\n          );\n        });\n\n        self.updateDropdowns();\n        self.extensionTables.forEach((ext, index) => {\n          self.updateColumnSelection(`extensionColumns-${index}`, ext.columns, ext.selectedColumns);\n        });\n      } catch (error) {\n        self.log(\"error\", \"Erreur de rendu de l'interface utilisateur:\", error);\n        self.showError(\"Échec du rendu de l'interface utilisateur. Veuillez actualiser le complément.\");\n      }\n    };\n\n    console.log(\"before init\");\n    \n    self\n      .init()\n      .then(() => {\n        console.log(\"befor\");\n        \n        self.render();\n        console.log(\"rendered\");\n        \n\n\n\n      })\n      .catch((error) => {\n        console.log(\"init error +++\");\n        \n        self.log(\"error\", \"Échec de l'initialisation:\", error);\n        self.showError(`Échec de l'initialisation : ${error.message}`);\n      });\n  }\n\n\n  // console.log(\"hilaaaaw\");\n\n  \n const app = new App();\n  window.app = app;\n});\n","// Imports\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\n// Module\nvar code = \" <!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\"/> <title>test addin</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://cdn.jsdelivr.net/npm/bulma@1.0.2/css/bulma.min.css\\\"/> <link rel=\\\"stylesheet\\\" href=\\\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_IMPORT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"\\\"> <div>holallalaa </div> <div id=\\\"root\\\"></div> </body> </html> \";\n// Exports\nexport default code;"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","g","globalThis","this","Function","e","window","o","obj","prop","Object","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","Error","replace","p","b","baseURI","self","href","_regeneratorRuntime","t","r","n","defineProperty","value","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","d","getPrototypeOf","v","values","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","Office","onReady","DEFAULT_RESULT_SHEET","DEBOUNCE_DELAY","app","allSheets","sheets","listNominativeSheet","listNominativeTables","listNominativeTable","listNominativeColumns","listNominativeJoinColumn","selectedNominativeColumns","listEffetiveSheet","listEffetiveTables","listEffetiveTable","listEffetiveColumns","listEffetiveJoinColumn","selectedEffectiveColumns","showNominativeAdvanced","showEffectiveAdvanced","resultSheetName","selectedNominativeGroupByColumns","listNominativeGroupByColumns","sheetCache","listenersAdded","filters","columnUniqueValues","Map","showGroupBy","templateSheet","templateRangeAddress","showColumnOrdering","orderedColumns","extensionTables","showExtensionTables","log","level","message","_console","timestamp","Date","toISOString","_len","args","Array","_key","console","concat","debounce","func","wait","timeout","_len2","_key2","clearTimeout","setTimeout","showError","root","getElementById","errorDiv","createElement","className","innerHTML","insertBefore","firstChild","alert","showProgress","progressDiv","id","textContent","hideProgress","progress","remove","sanitizeSheetName","getUniqueColumnValues","_ref","_callee2","columnName","uniqueValues","_context2","has","get","Excel","run","_ref2","_callee","context","sheet","table","column","range","uniqueSet","_context","workbook","worksheets","getItem","tables","columns","getDataBodyRange","load","sync","flat","map","val","String","trim","Set","from","sort","_x2","set","t0","_x","generateTableHeader","templateValues","tableInfo","groupRows","tableHeaders","computedValues","tableName","finalTableName","rowCount","uniqueJoinValues","sumColumns","avgColumns","expressionRegex","row","cell","match","exec","expression","startsWith","add","split","columnIndices","header","index","tableData","colName","colIndex","Number","reduce","_computedValues$expre","parts","parseInt","rowData","validateState","nominativeHeaders","effectiveHeaders","allGroupByColumns","errors","indexOf","some","col","includes","filter","ext","joinColumnResult","joinColumnExtension","every","join","process","_callee4","processButton","resultSheetInput","_context6","querySelector","disabled","classList","_ref4","_callee3","nominativeSheet","nominativeTable","effectiveSheet","effectiveTable","resultSheet","allTables","nominativeRange","effectiveRange","nominativeColumns","effectiveColumns","extensionData","extensionFormats","_iterator","_step","templateRange","templateRowCount","templateColumnCount","nominativeData","nominativeRows","effectiveData","effectiveRows","_loop","_i","_Object$entries","nominativeFormats","effectiveFormats","effectiveLookup","extensionLookups","filteredNominativeRows","activeFilters","filterColIndices","combinedData","groupedData","targetSheet","_targetSheet$getUsedR","currentRow","tableCounter","existingTableNames","operations","_loop2","_i2","_Object$entries2","nextRow","_i3","_operations","op","_context5","getItemOrNullObject","getRange","_createForOfIteratorHelper","err","names","columnCount","_Object$entries$_i","_Object$entries$_i$","extData","_context3","_slicedToArray","headers","rows","items","format","numberFormat","entries","_toConsumableArray","flatMap","_col$numberFormat","_col$numberFormat2","joinValue","extRows","extHeaders","joinColIndex","lookup","toLowerCase","nominativeJoinValue","effectiveRow","valueMap","idx","_row$idx","_effectiveRow$idx","_valueMap$ext$joinCol","extLookup","resultJoinValue","extRow","_extRow$idx","groupKey","isNullObject","getUsedRange","clear","activate","_Object$entries2$_i","_context4","size","execute","processedHeaderValues","headerRange","getRangeByIndexes","copyFrom","RangeCopyType","formats","tableStartRow","tableRange","headerTableRange","fmt","autofitColumns","_x3","updateOrderedColumns","combined","selectedColumns","currentSet","filteredOrdered","newColumns","renderColumnOrderList","updateGroupByColumnsList","allColumns","columnOrderList","setupDragAndDrop","draggedItem","querySelectorAll","item","addEventListener","target","preventDefault","container","afterElement","clientY","closest","child","box","getBoundingClientRect","offset","top","height","element","NEGATIVE_INFINITY","appendChild","newOrder","children","dataset","toggleColumnOrdering","render","resetColumnOrder","getWorkbookSheets","_callee6","_context8","_ref6","_callee5","j","_context7","_x4","invalidateCache","updateTemplateRange","_ref7","_callee8","sheetName","rangeInput","_context10","_ref8","_callee7","usedRange","_context9","address","_x6","_x5","init","_callee9","workbookSheets","_context11","handleNominativeSheetChange","handleEffectiveSheetChange","find","handleNominativeTableChange","updateDropdowns","renderGroupBySummary","handleNominativeJoinColumnChange","updateGroupByColumns","handleEffectiveTableChange","handleEffectiveJoinColumnChange","handleExtensionSheetChange","handleExtensionTableChange","showColumns","addExtensionTable","newExt","removeExtensionTable","splice","toggleExtensionColumns","updateDropdown","updateColumnSelection","selectedValue","dropdown","checkbox","checked","selectAllBtn","unselectAllBtn","groupByHeader","summary","toggleAdvanced","section","toggleGroupBy","toggleExtensionTables","_callee13","_document$getElementB","_document$getElementB2","_document$getElementB3","_document$getElementB4","_document$getElementB5","_document$getElementB6","_document$getElementB7","_document$getElementB8","_document$getElementB9","_document$getElementB10","_document$getElementB11","_iterator2","_step2","groupBySummary","_context15","_ref11","_callee10","_context12","_x7","_callee11","newColumn","_context13","select","_ref13","_callee12","_context14","_x8","button","t1","error","URL"],"sourceRoot":""}